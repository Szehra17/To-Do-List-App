{"ast":null,"code":"import React,{useState}from\"react\";import Card from\"@mui/material/Card\";import CardContent from\"@mui/material/CardContent\";import Typography from\"@mui/material/Typography\";import IconButton from\"@mui/material/IconButton\";import DeleteIcon from\"@mui/icons-material/Delete\";import EditIcon from\"@mui/icons-material/Edit\";import SaveIcon from\"@mui/icons-material/Save\";import Box from\"@mui/material/Box\";import TaskStatusButton from\"./TaskStatusButton\";import{Stack}from\"@mui/material\";import Divider from\"@mui/material/Divider\";/**\n * Task Component\n * \n * Displays individual task details with options to edit, delete, and change the task's status.\n * The component allows toggling between viewing and editing the task details.\n * \n * Props:\n * - `task` (object): The task object containing the task's details (name, description, assignedTo, etc.).\n * - `onEdit` (function): Callback function to handle task editing (usually to update the task in the parent component).\n * - `onDelete` (function): Callback function to handle task deletion.\n */import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Task=_ref=>{let{task,onEdit,onDelete}=_ref;// useState hooks to manage local state for editing mode and edited task data\nconst[isEditing,setIsEditing]=useState(false);const[editedTask,setEditedTask]=useState({...task});/**\n   * Updates the status of the task and triggers the onEdit callback.\n   */const setStatus=newStatus=>{const updatedTask={...editedTask,status:newStatus};onEdit(updatedTask);//Calling the parent component's onEdit function to update the task\nsetEditedTask(updatedTask);// Updating the local state with the new task details\n};const handleEdit=e=>{e.preventDefault();setIsEditing(!isEditing);// Toggle editing mode\nif(isEditing){onEdit(editedTask);// Save the edited task if switching to view mode\n}};/**\n   * Handles the status change when the task status button is clicked.\n   * The status cycles through a predefined set of statuses: not-started, in-progress, review, and completed.\n   */const handleButtonClick=()=>{switch(editedTask.status){case\"not-started\":setStatus(\"in-progress\");break;case\"in-progress\":setStatus(\"review\");break;case\"review\":setStatus(\"completed\");break;case\"completed\":setStatus(\"not-started\");// You can change this behavior if needed\nbreak;default:setStatus(\"not-started\");break;}};// Color background status\nconst getStatusStyle=status=>{switch(status){case\"not Started\":return{backgroundColor:\"lightgray\",color:\"black\"};case\"in-progress\":return{backgroundColor:\"yellow\",color:\"black\"};case\"review\":return{backgroundColor:\"blue\",color:\"white\"};case\"completed\":return{backgroundColor:\"green\",color:\"white\"};default:return{backgroundColor:\"lightgray\",color:\"black\"};}};//when the due dute is soon\nconst isDueSoon=dueDate=>{const currentDate=new Date();const taskDueDate=new Date(dueDate);const differenceInTime=taskDueDate-currentDate;const differenceInDays=differenceInTime/(1000*3600*24);// Convert milliseconds to days\nreturn differenceInDays>=0&&differenceInDays<=3;// Due within the next 3 days\n};//formatted date\nconst formatDate=dateString=>{const date=new Date(dateString);const day=String(date.getDate()).padStart(2,\"0\");// Get day and pad it to 2 digits\nconst month=String(date.getMonth()+1).padStart(2,\"0\");// Get month (0-11) and pad it\nconst year=date.getFullYear();// Get year\nreturn`${day}-${month}-${year}`;// Return formatted date\n};// Reset task status to Not Status\nconst resetTask=e=>{e.preventDefault();setStatus({name:\"\",// Initial name\ndescription:\"\",// Initial description\ndueDate:new Date(),// Today's date (or some default value)\nassignedTo:\"\",// Initial assigned to\nstatus:\"Not Started\"// Initial status\n});};return/*#__PURE__*/_jsxs(Card,{sx:{mb:2,border:editedTask.status===\"completed\"?\"2px solid green\":\"2px solid lightgray\",// Change border color based on status\nmarginBottom:\"1rem\",transition:\"border-color 0.3s\"// Smooth transition for border color change\n},children:[/*#__PURE__*/_jsx(CardContent,{children:!isEditing?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Box,{sx:{pb:\"16px\"},children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:2,sx:{justifyContent:\"space-between\"},children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:task.name}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",style:{...getStatusStyle(editedTask.status),padding:\"6px\",borderRadius:\"5px\",textAlign:\"center\"},children:editedTask.status})]}),/*#__PURE__*/_jsx(TaskStatusButton,{currentStatus:editedTask.status,onButtonClick:handleButtonClick})]}),/*#__PURE__*/_jsx(Divider,{sx:{pb:\"16px\"}})]}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",sx:{pb:\"16px\"},children:task.description}),/*#__PURE__*/_jsxs(Stack,{spacing:2,direction:\"column\",sx:{pb:\"12px\"},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:\"bold\"},children:\"Assigned to: \"}),task.assignedTo]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",style:{color:isDueSoon(task.dueDate)?\"red\":\"black\"},children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:\"bold\"},children:\"Due Date: \"}),formatDate(task.dueDate)]})]})]}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Box,{component:\"form\",sx:{display:\"flex\",flexDirection:\"column\",gap:1},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editedTask.name,onChange:e=>setEditedTask({...editedTask,name:e.target.value})}),/*#__PURE__*/_jsx(\"textarea\",{value:editedTask.description,onChange:e=>setEditedTask({...editedTask,description:e.target.value})}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:editedTask.dueDate,onChange:e=>setEditedTask({...editedTask,dueDate:e.target.value})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editedTask.assignedTo,onChange:e=>setEditedTask({...editedTask,assignedTo:e.target.value})}),/*#__PURE__*/_jsxs(\"select\",{value:editedTask.status,onChange:e=>setEditedTask({...editedTask,status:e.target.value}),children:[/*#__PURE__*/_jsx(\"option\",{value:\"not-started\",children:\"Not Started\"}),/*#__PURE__*/_jsx(\"option\",{value:\"in-progress\",children:\"In-Progress\"}),/*#__PURE__*/_jsx(\"option\",{value:\"review\",children:\"Review\"}),/*#__PURE__*/_jsx(\"option\",{value:\"completed\",children:\"Completed\"})]})]})})}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(Box,{sx:{display:\"flex\",justifyContent:\"flex-end\",gap:1,padding:1},children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleEdit,color:\"primary\",children:!isEditing?/*#__PURE__*/_jsx(EditIcon,{}):/*#__PURE__*/_jsx(SaveIcon,{})}),/*#__PURE__*/_jsx(IconButton,{onClick:()=>onDelete(task.id),color:\"error\",children:/*#__PURE__*/_jsx(DeleteIcon,{})}),/*#__PURE__*/_jsx(IconButton,{onClick:resetTask,color:\"primary\"})]})]});};export default Task;","map":{"version":3,"names":["React","useState","Card","CardContent","Typography","IconButton","DeleteIcon","EditIcon","SaveIcon","Box","TaskStatusButton","Stack","Divider","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Task","_ref","task","onEdit","onDelete","isEditing","setIsEditing","editedTask","setEditedTask","setStatus","newStatus","updatedTask","status","handleEdit","e","preventDefault","handleButtonClick","getStatusStyle","backgroundColor","color","isDueSoon","dueDate","currentDate","Date","taskDueDate","differenceInTime","differenceInDays","formatDate","dateString","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","resetTask","name","description","assignedTo","sx","mb","border","marginBottom","transition","children","pb","direction","spacing","justifyContent","variant","style","padding","borderRadius","textAlign","currentStatus","onButtonClick","fontWeight","component","display","flexDirection","gap","type","value","onChange","target","onClick","id"],"sources":["/Users/thaihanguyen/Documents/Challenges/To-Do-List-App/src/components/Task.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport Box from \"@mui/material/Box\";\nimport TaskStatusButton from \"./TaskStatusButton\";\nimport { Stack } from \"@mui/material\";\nimport Divider from \"@mui/material/Divider\";\n\n/**\n * Task Component\n * \n * Displays individual task details with options to edit, delete, and change the task's status.\n * The component allows toggling between viewing and editing the task details.\n * \n * Props:\n * - `task` (object): The task object containing the task's details (name, description, assignedTo, etc.).\n * - `onEdit` (function): Callback function to handle task editing (usually to update the task in the parent component).\n * - `onDelete` (function): Callback function to handle task deletion.\n */\n\nconst Task = ({ task, onEdit, onDelete }) => {\n  // useState hooks to manage local state for editing mode and edited task data\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTask, setEditedTask] = useState({ ...task });\n\n  /**\n   * Updates the status of the task and triggers the onEdit callback.\n   */\n\n  const setStatus = (newStatus) => {\n    const updatedTask = { ...editedTask, status: newStatus };\n    onEdit(updatedTask); //Calling the parent component's onEdit function to update the task\n    setEditedTask(updatedTask); // Updating the local state with the new task details\n  }\n\n  const handleEdit = (e) => {\n    e.preventDefault();\n    setIsEditing(!isEditing); // Toggle editing mode\n    if (isEditing) {\n      onEdit(editedTask); // Save the edited task if switching to view mode\n    }\n  };\n\n   /**\n   * Handles the status change when the task status button is clicked.\n   * The status cycles through a predefined set of statuses: not-started, in-progress, review, and completed.\n   */\n  \n  const handleButtonClick = () => {\n    switch (editedTask.status) {\n      case \"not-started\":\n        setStatus(\"in-progress\");\n        break;\n      case \"in-progress\":\n        setStatus(\"review\");\n        break;\n      case \"review\":\n        setStatus(\"completed\");\n        break;\n      case \"completed\":\n        setStatus(\"not-started\"); // You can change this behavior if needed\n        break;\n      default:\n        setStatus(\"not-started\");\n        break;\n    }\n  };\n\n  \n\n  // Color background status\n  const getStatusStyle = (status) => {\n    switch (status) {\n      case \"not Started\":\n        return { backgroundColor: \"lightgray\", color: \"black\" };\n      case \"in-progress\":\n        return { backgroundColor: \"yellow\", color: \"black\" };\n      case \"review\":\n        return { backgroundColor: \"blue\", color: \"white\" };\n      case \"completed\":\n        return { backgroundColor: \"green\", color: \"white\" };\n      default:\n        return { backgroundColor: \"lightgray\", color: \"black\" };\n    }\n  };\n\n  //when the due dute is soon\n  const isDueSoon = (dueDate) => {\n    const currentDate = new Date();\n    const taskDueDate = new Date(dueDate);\n    const differenceInTime = taskDueDate - currentDate;\n    const differenceInDays = differenceInTime / (1000 * 3600 * 24); // Convert milliseconds to days\n    return differenceInDays >= 0 && differenceInDays <= 3; // Due within the next 3 days\n  };\n\n  //formatted date\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, \"0\"); // Get day and pad it to 2 digits\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Get month (0-11) and pad it\n    const year = date.getFullYear(); // Get year\n    return `${day}-${month}-${year}`; // Return formatted date\n  };\n\n  // Reset task status to Not Status\n  const resetTask = (e) => {\n    e.preventDefault();\n    setStatus({\n    name: \"\", // Initial name\n    description: \"\", // Initial description\n    dueDate: new Date(), // Today's date (or some default value)\n    assignedTo: \"\", // Initial assigned to\n    status: \"Not Started\", // Initial status\n  });\n  };\n  return (\n    <Card\n      sx={{\n        mb: 2,\n        border:\n        editedTask.status === \"completed\" ? \"2px solid green\" : \"2px solid lightgray\", // Change border color based on status\n        marginBottom: \"1rem\",\n        transition: \"border-color 0.3s\", // Smooth transition for border color change\n      }}\n    >\n      <CardContent>\n        {!isEditing ? (\n          <>\n            <Box sx={{ pb: \"16px\" }}>\n              <Stack\n                direction=\"row\"\n                spacing={2}\n                sx={{\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Stack direction=\"row\" spacing={2}>\n                  <Typography variant=\"h6\">{task.name}</Typography>\n                  <Typography\n                    variant=\"body2\"\n                    style={{\n                      ...getStatusStyle(editedTask.status),\n                      padding: \"6px\",\n                      borderRadius: \"5px\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    {editedTask.status}\n                  </Typography>\n                </Stack>\n                <TaskStatusButton\n                  currentStatus={editedTask.status}\n                  onButtonClick={handleButtonClick}\n                />\n              </Stack>\n              <Divider sx={{ pb: \"16px\" }} />\n            </Box>\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              sx={{ pb: \"16px\" }}\n            >\n              {task.description}\n            </Typography>\n            <Stack spacing={2} direction=\"column\" sx={{ pb: \"12px\" }}>\n              <Typography variant=\"body2\">\n                <span style={{ fontWeight: \"bold\" }}>Assigned to: </span>\n                {task.assignedTo}\n              </Typography>\n              <Typography\n                variant=\"body2\"\n                style={{ color: isDueSoon(task.dueDate) ? \"red\" : \"black\" }}\n              >\n                <span style={{ fontWeight: \"bold\" }}>Due Date: </span>\n                {formatDate(task.dueDate)}\n              </Typography>\n\n              {/* <Typography variant=\"body2\">\n                <span style={{ fontWeight: \"bold\" }}>Status: </span>{\" \"}\n              </Typography> */}\n            </Stack>\n          </>\n        ) : (\n          <>\n            <Box\n              component=\"form\"\n              sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}\n            >\n              <input\n                type=\"text\"\n                value={editedTask.name}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, name: e.target.value })\n                }\n              />\n              <textarea\n                value={editedTask.description}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, description: e.target.value })\n                }\n              ></textarea>\n              <input\n                type=\"date\"\n                value={editedTask.dueDate}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, dueDate: e.target.value })\n                }\n              />\n              <input\n                type=\"text\"\n                value={editedTask.assignedTo}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, assignedTo: e.target.value })\n                }\n              />\n              <select\n                value={editedTask.status}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, status: e.target.value })\n                }\n              >\n                <option value=\"not-started\">Not Started</option>\n                <option value=\"in-progress\">In-Progress</option>\n                <option value=\"review\">Review</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n            </Box>\n          </>\n        )}\n      </CardContent>\n      <Divider />\n      <Box\n        sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, padding: 1 }}\n      >\n        <IconButton onClick={handleEdit} color=\"primary\">\n          {!isEditing ? <EditIcon /> : <SaveIcon />}\n        </IconButton>\n        <IconButton onClick={() => onDelete(task.id)} color=\"error\">\n          <DeleteIcon />\n        </IconButton>\n        <IconButton onClick={resetTask} color=\"primary\"></IconButton>\n      </Box>\n    </Card>\n  );\n};\n\nexport default Task;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}