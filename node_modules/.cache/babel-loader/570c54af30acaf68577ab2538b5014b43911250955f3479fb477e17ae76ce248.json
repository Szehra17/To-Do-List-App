{"ast":null,"code":"var _jsxFileName = \"/Users/thaihanguyen/Documents/Challenges/To-Do-List-App/src/components/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport Box from \"@mui/material/Box\";\nimport TaskStatusButton from \"./TaskStatusButton\";\nimport { Stack } from \"@mui/material\";\nimport Divider from \"@mui/material/Divider\";\n\n/**\n * Task Component\n * \n * Displays individual task details with options to edit, delete, and change the task's status.\n * The component allows toggling between viewing and editing the task details.\n * \n * Props:\n * - `task` (object): The task object containing the task's details (name, description, assignedTo, etc.).\n * - `onEdit` (function): Callback function to handle task editing (usually to update the task in the parent component).\n * - `onDelete` (function): Callback function to handle task deletion.\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Task = ({\n  task,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n  // useState hooks to manage local state for editing mode and edited task data\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTask, setEditedTask] = useState({\n    ...task\n  });\n\n  /**\n   * Updates the status of the task and triggers the onEdit callback.\n   */\n\n  const setStatus = newStatus => {\n    const updatedTask = {\n      ...editedTask,\n      status: newStatus\n    };\n    onEdit(updatedTask); //Calling the parent component's onEdit function to update the task\n    setEditedTask(updatedTask); // Updating the local state with the new task details\n  };\n  const handleEdit = e => {\n    e.preventDefault();\n    setIsEditing(!isEditing); // Toggle editing mode\n    if (isEditing) {\n      onEdit(editedTask); // Save the edited task if switching to view mode\n    }\n  };\n\n  /**\n  * Handles the status change when the task status button is clicked.\n  * The status cycles through a predefined set of statuses: not-started, in-progress, review, and completed.\n  */\n\n  const handleButtonClick = () => {\n    switch (editedTask.status) {\n      case \"not-started\":\n        setStatus(\"in-progress\");\n        break;\n      case \"in-progress\":\n        setStatus(\"review\");\n        break;\n      case \"review\":\n        setStatus(\"completed\");\n        break;\n      case \"completed\":\n        setStatus(\"not-started\"); // You can change this behavior if needed\n        break;\n      default:\n        setStatus(\"not-started\");\n        break;\n    }\n  };\n\n  // Color background status\n  const getStatusStyle = status => {\n    switch (status) {\n      case \"not Started\":\n        return {\n          backgroundColor: \"lightgray\",\n          color: \"black\"\n        };\n      case \"in-progress\":\n        return {\n          backgroundColor: \"yellow\",\n          color: \"black\"\n        };\n      case \"review\":\n        return {\n          backgroundColor: \"blue\",\n          color: \"white\"\n        };\n      case \"completed\":\n        return {\n          backgroundColor: \"green\",\n          color: \"white\"\n        };\n      default:\n        return {\n          backgroundColor: \"lightgray\",\n          color: \"black\"\n        };\n    }\n  };\n\n  //when the due dute is soon\n  const isDueSoon = dueDate => {\n    const currentDate = new Date();\n    const taskDueDate = new Date(dueDate);\n    const differenceInTime = taskDueDate - currentDate;\n    const differenceInDays = differenceInTime / (1000 * 3600 * 24); // Convert milliseconds to days\n    return differenceInDays >= 0 && differenceInDays <= 3; // Due within the next 3 days\n  };\n\n  //formatted date\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, \"0\"); // Get day and pad it to 2 digits\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Get month (0-11) and pad it\n    const year = date.getFullYear(); // Get year\n    return `${day}-${month}-${year}`; // Return formatted date\n  };\n\n  // Reset task status to Not Status\n  const resetTask = e => {\n    e.preventDefault();\n    setStatus(\"Not Started\");\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mb: 2,\n      border: editedTask.status === \"completed\" ? \"2px solid green\" : \"2px solid lightgray\",\n      // Change border color based on status\n      marginBottom: \"1rem\",\n      transition: \"border-color 0.3s\" // Smooth transition for border color change\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardContent, {\n      children: !isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            pb: \"16px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Stack, {\n            direction: \"row\",\n            spacing: 2,\n            sx: {\n              justifyContent: \"space-between\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                style: {\n                  ...getStatusStyle(editedTask.status),\n                  padding: \"6px\",\n                  borderRadius: \"5px\",\n                  textAlign: \"center\"\n                },\n                children: editedTask.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TaskStatusButton, {\n              currentStatus: editedTask.status,\n              onButtonClick: handleButtonClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            sx: {\n              pb: \"16px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          sx: {\n            pb: \"16px\"\n          },\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 2,\n          direction: \"column\",\n          sx: {\n            pb: \"12px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: \"bold\"\n              },\n              children: \"Assigned to: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), task.assignedTo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            style: {\n              color: isDueSoon(task.dueDate) ? \"red\" : \"black\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: \"bold\"\n              },\n              children: \"Due Date: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this), formatDate(task.dueDate)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedTask.name,\n            onChange: e => setEditedTask({\n              ...editedTask,\n              name: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: editedTask.description,\n            onChange: e => setEditedTask({\n              ...editedTask,\n              description: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: editedTask.dueDate,\n            onChange: e => setEditedTask({\n              ...editedTask,\n              dueDate: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedTask.assignedTo,\n            onChange: e => setEditedTask({\n              ...editedTask,\n              assignedTo: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: editedTask.status,\n            onChange: e => setEditedTask({\n              ...editedTask,\n              status: e.target.value\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"not-started\",\n              children: \"Not Started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"in-progress\",\n              children: \"In-Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"review\",\n              children: \"Review\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"completed\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        gap: 1,\n        padding: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleEdit,\n        color: \"primary\",\n        children: !isEditing ? /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => onDelete(task.id),\n        color: \"error\",\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(Task, \"W/3P1yEVJbT1oRLRCTXvWTLhPqM=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","Card","CardContent","Typography","IconButton","DeleteIcon","EditIcon","SaveIcon","Box","TaskStatusButton","Stack","Divider","jsxDEV","_jsxDEV","Fragment","_Fragment","Task","task","onEdit","onDelete","_s","isEditing","setIsEditing","editedTask","setEditedTask","setStatus","newStatus","updatedTask","status","handleEdit","e","preventDefault","handleButtonClick","getStatusStyle","backgroundColor","color","isDueSoon","dueDate","currentDate","Date","taskDueDate","differenceInTime","differenceInDays","formatDate","dateString","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","resetTask","sx","mb","border","marginBottom","transition","children","pb","direction","spacing","justifyContent","variant","name","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","borderRadius","textAlign","currentStatus","onButtonClick","description","fontWeight","assignedTo","component","display","flexDirection","gap","type","value","onChange","target","onClick","id","_c","$RefreshReg$"],"sources":["/Users/thaihanguyen/Documents/Challenges/To-Do-List-App/src/components/Task.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport Box from \"@mui/material/Box\";\nimport TaskStatusButton from \"./TaskStatusButton\";\nimport { Stack } from \"@mui/material\";\nimport Divider from \"@mui/material/Divider\";\n\n/**\n * Task Component\n * \n * Displays individual task details with options to edit, delete, and change the task's status.\n * The component allows toggling between viewing and editing the task details.\n * \n * Props:\n * - `task` (object): The task object containing the task's details (name, description, assignedTo, etc.).\n * - `onEdit` (function): Callback function to handle task editing (usually to update the task in the parent component).\n * - `onDelete` (function): Callback function to handle task deletion.\n */\n\nconst Task = ({ task, onEdit, onDelete }) => {\n  // useState hooks to manage local state for editing mode and edited task data\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTask, setEditedTask] = useState({ ...task });\n\n  /**\n   * Updates the status of the task and triggers the onEdit callback.\n   */\n\n  const setStatus = (newStatus) => {\n    const updatedTask = { ...editedTask, status: newStatus };\n    onEdit(updatedTask); //Calling the parent component's onEdit function to update the task\n    setEditedTask(updatedTask); // Updating the local state with the new task details\n  }\n\n  const handleEdit = (e) => {\n    e.preventDefault();\n    setIsEditing(!isEditing); // Toggle editing mode\n    if (isEditing) {\n      onEdit(editedTask); // Save the edited task if switching to view mode\n    }\n  };\n\n   /**\n   * Handles the status change when the task status button is clicked.\n   * The status cycles through a predefined set of statuses: not-started, in-progress, review, and completed.\n   */\n  \n  const handleButtonClick = () => {\n    switch (editedTask.status) {\n      case \"not-started\":\n        setStatus(\"in-progress\");\n        break;\n      case \"in-progress\":\n        setStatus(\"review\");\n        break;\n      case \"review\":\n        setStatus(\"completed\");\n        break;\n      case \"completed\":\n        setStatus(\"not-started\"); // You can change this behavior if needed\n        break;\n      default:\n        setStatus(\"not-started\");\n        break;\n    }\n  };\n\n  \n\n  // Color background status\n  const getStatusStyle = (status) => {\n    switch (status) {\n      case \"not Started\":\n        return { backgroundColor: \"lightgray\", color: \"black\" };\n      case \"in-progress\":\n        return { backgroundColor: \"yellow\", color: \"black\" };\n      case \"review\":\n        return { backgroundColor: \"blue\", color: \"white\" };\n      case \"completed\":\n        return { backgroundColor: \"green\", color: \"white\" };\n      default:\n        return { backgroundColor: \"lightgray\", color: \"black\" };\n    }\n  };\n\n  //when the due dute is soon\n  const isDueSoon = (dueDate) => {\n    const currentDate = new Date();\n    const taskDueDate = new Date(dueDate);\n    const differenceInTime = taskDueDate - currentDate;\n    const differenceInDays = differenceInTime / (1000 * 3600 * 24); // Convert milliseconds to days\n    return differenceInDays >= 0 && differenceInDays <= 3; // Due within the next 3 days\n  };\n\n  //formatted date\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, \"0\"); // Get day and pad it to 2 digits\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Get month (0-11) and pad it\n    const year = date.getFullYear(); // Get year\n    return `${day}-${month}-${year}`; // Return formatted date\n  };\n\n  // Reset task status to Not Status\n  const resetTask = (e) => {\n    e.preventDefault();\n    setStatus(\"Not Started\");\n  };\n  return (\n    <Card\n      sx={{\n        mb: 2,\n        border:\n        editedTask.status === \"completed\" ? \"2px solid green\" : \"2px solid lightgray\", // Change border color based on status\n        marginBottom: \"1rem\",\n        transition: \"border-color 0.3s\", // Smooth transition for border color change\n      }}\n    >\n      <CardContent>\n        {!isEditing ? (\n          <>\n            <Box sx={{ pb: \"16px\" }}>\n              <Stack\n                direction=\"row\"\n                spacing={2}\n                sx={{\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Stack direction=\"row\" spacing={2}>\n                  <Typography variant=\"h6\">{task.name}</Typography>\n                  <Typography\n                    variant=\"body2\"\n                    style={{\n                      ...getStatusStyle(editedTask.status),\n                      padding: \"6px\",\n                      borderRadius: \"5px\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    {editedTask.status}\n                  </Typography>\n                </Stack>\n                <TaskStatusButton\n                  currentStatus={editedTask.status}\n                  onButtonClick={handleButtonClick}\n                />\n              </Stack>\n              <Divider sx={{ pb: \"16px\" }} />\n            </Box>\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              sx={{ pb: \"16px\" }}\n            >\n              {task.description}\n            </Typography>\n            <Stack spacing={2} direction=\"column\" sx={{ pb: \"12px\" }}>\n              <Typography variant=\"body2\">\n                <span style={{ fontWeight: \"bold\" }}>Assigned to: </span>\n                {task.assignedTo}\n              </Typography>\n              <Typography\n                variant=\"body2\"\n                style={{ color: isDueSoon(task.dueDate) ? \"red\" : \"black\" }}\n              >\n                <span style={{ fontWeight: \"bold\" }}>Due Date: </span>\n                {formatDate(task.dueDate)}\n              </Typography>\n\n              {/* <Typography variant=\"body2\">\n                <span style={{ fontWeight: \"bold\" }}>Status: </span>{\" \"}\n              </Typography> */}\n            </Stack>\n          </>\n        ) : (\n          <>\n            <Box\n              component=\"form\"\n              sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}\n            >\n              <input\n                type=\"text\"\n                value={editedTask.name}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, name: e.target.value })\n                }\n              />\n              <textarea\n                value={editedTask.description}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, description: e.target.value })\n                }\n              ></textarea>\n              <input\n                type=\"date\"\n                value={editedTask.dueDate}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, dueDate: e.target.value })\n                }\n              />\n              <input\n                type=\"text\"\n                value={editedTask.assignedTo}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, assignedTo: e.target.value })\n                }\n              />\n              <select\n                value={editedTask.status}\n                onChange={(e) =>\n                  setEditedTask({ ...editedTask, status: e.target.value })\n                }\n              >\n                <option value=\"not-started\">Not Started</option>\n                <option value=\"in-progress\">In-Progress</option>\n                <option value=\"review\">Review</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n            </Box>\n          </>\n        )}\n      </CardContent>\n      <Divider />\n      <Box\n        sx={{ display: \"flex\", justifyContent: \"flex-end\", gap: 1, padding: 1 }}\n      >\n        <IconButton onClick={handleEdit} color=\"primary\">\n          {!isEditing ? <EditIcon /> : <SaveIcon />}\n        </IconButton>\n        <IconButton onClick={() => onDelete(task.id)} color=\"error\">\n          <DeleteIcon />\n        </IconButton>\n      </Box>\n    </Card>\n  );\n};\n\nexport default Task;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}