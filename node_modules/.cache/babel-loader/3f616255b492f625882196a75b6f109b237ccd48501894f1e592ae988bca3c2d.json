{"ast":null,"code":"var _jsxFileName = \"/Users/thaihanguyen/Documents/Challenges/To-Do-List-App/src/components/TaskStatusButton.js\";\nimport React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskStatusButton = ({\n  currentStatus,\n  onButtonClick,\n  resetTask\n}) => {\n  const getButtonLabel = () => {\n    switch (currentStatus) {\n      case \"Not Status\":\n        return \"Accept Task\";\n      case \"In-progress\":\n        return \"Mark to Review\";\n      case \"Review\":\n        return \"Mark Completed\";\n      case \"Completed\":\n        return \"Reset Task\";\n      // Final state label for reset\n      default:\n        return \"Accept Task\";\n    }\n  };\n\n  // Determine if the task is completed\n  const isCompleted = currentStatus === \"Completed\";\n\n  // Set button color and variant based on status\n  const buttonVariant = isCompleted ? \"contained\" : \"outlined\";\n  const buttonColor = isCompleted ? \"success\" : \"primary\"; // Success color for completed task\n\n  const handleClick = () => {\n    if (isCompleted) {\n      resetTask(); // Call the reset task function\n    } else {\n      onButtonClick(); // Regular button click for other statuses\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: buttonVariant,\n    onClick: handleClick,\n    disabled: isCompleted // Disable if completed\n    ,\n    color: buttonColor,\n    sx: {\n      bgcolor: isCompleted ? \"success.main\" : undefined,\n      color: isCompleted ? \"white\" : undefined,\n      \"&:hover\": {\n        bgcolor: isCompleted ? \"success.dark\" : undefined\n      }\n    },\n    children: getButtonLabel()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskStatusButton;\nexport default TaskStatusButton;\nvar _c;\n$RefreshReg$(_c, \"TaskStatusButton\");","map":{"version":3,"names":["React","Button","jsxDEV","_jsxDEV","TaskStatusButton","currentStatus","onButtonClick","resetTask","getButtonLabel","isCompleted","buttonVariant","buttonColor","handleClick","variant","onClick","disabled","color","sx","bgcolor","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thaihanguyen/Documents/Challenges/To-Do-List-App/src/components/TaskStatusButton.js"],"sourcesContent":["import React from \"react\";\nimport Button from \"@mui/material/Button\";\n\nconst TaskStatusButton = ({ currentStatus, onButtonClick, resetTask }) => {\n  const getButtonLabel = () => {\n    switch (currentStatus) {\n      case \"Not Status\":\n        return \"Accept Task\";\n      case \"In-progress\":\n        return \"Mark to Review\";\n      case \"Review\":\n        return \"Mark Completed\";\n      case \"Completed\":\n        return \"Reset Task\"; // Final state label for reset\n      default:\n        return \"Accept Task\";\n    }\n  };\n\n  // Determine if the task is completed\n  const isCompleted = currentStatus === \"Completed\";\n\n  // Set button color and variant based on status\n  const buttonVariant = isCompleted ? \"contained\" : \"outlined\";\n  const buttonColor = isCompleted ? \"success\" : \"primary\"; // Success color for completed task\n\n  const handleClick = () => {\n    if (isCompleted) {\n      resetTask(); // Call the reset task function\n    } else {\n      onButtonClick(); // Regular button click for other statuses\n    }\n  };\n\n  return (\n    <Button\n      variant={buttonVariant}\n      onClick={handleClick}\n      disabled={isCompleted} // Disable if completed\n      color={buttonColor}\n      sx={{\n        bgcolor: isCompleted ? \"success.main\" : undefined,\n        color: isCompleted ? \"white\" : undefined,\n        \"&:hover\": {\n          bgcolor: isCompleted ? \"success.dark\" : undefined,\n        },\n      }}\n    >\n      {getButtonLabel()}\n    </Button>\n  );\n};\n\nexport default TaskStatusButton;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,aAAa;EAAEC,aAAa;EAAEC;AAAU,CAAC,KAAK;EACxE,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,QAAQH,aAAa;MACnB,KAAK,YAAY;QACf,OAAO,aAAa;MACtB,KAAK,aAAa;QAChB,OAAO,gBAAgB;MACzB,KAAK,QAAQ;QACX,OAAO,gBAAgB;MACzB,KAAK,WAAW;QACd,OAAO,YAAY;MAAE;MACvB;QACE,OAAO,aAAa;IACxB;EACF,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGJ,aAAa,KAAK,WAAW;;EAEjD;EACA,MAAMK,aAAa,GAAGD,WAAW,GAAG,WAAW,GAAG,UAAU;EAC5D,MAAME,WAAW,GAAGF,WAAW,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;;EAEzD,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIH,WAAW,EAAE;MACfF,SAAS,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,MAAM;MACLD,aAAa,CAAC,CAAC,CAAC,CAAC;IACnB;EACF,CAAC;EAED,oBACEH,OAAA,CAACF,MAAM;IACLY,OAAO,EAAEH,aAAc;IACvBI,OAAO,EAAEF,WAAY;IACrBG,QAAQ,EAAEN,WAAY,CAAC;IAAA;IACvBO,KAAK,EAAEL,WAAY;IACnBM,EAAE,EAAE;MACFC,OAAO,EAAET,WAAW,GAAG,cAAc,GAAGU,SAAS;MACjDH,KAAK,EAAEP,WAAW,GAAG,OAAO,GAAGU,SAAS;MACxC,SAAS,EAAE;QACTD,OAAO,EAAET,WAAW,GAAG,cAAc,GAAGU;MAC1C;IACF,CAAE;IAAAC,QAAA,EAEDZ,cAAc,CAAC;EAAC;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEb,CAAC;AAACC,EAAA,GAhDIrB,gBAAgB;AAkDtB,eAAeA,gBAAgB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}